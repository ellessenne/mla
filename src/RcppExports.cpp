// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// valfpa
Rcpp::NumericVector valfpa(Rcpp::NumericVector const& vw, Rcpp::NumericVector const& b, Rcpp::NumericVector const& delta, Rcpp::Function const& funcpa);
RcppExport SEXP _mla_valfpa(SEXP vwSEXP, SEXP bSEXP, SEXP deltaSEXP, SEXP funcpaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type vw(vwSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function const& >::type funcpa(funcpaSEXP);
    rcpp_result_gen = Rcpp::wrap(valfpa(vw, b, delta, funcpa));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mla_valfpa", (DL_FUNC) &_mla_valfpa, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_mla(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
